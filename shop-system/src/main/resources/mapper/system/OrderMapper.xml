<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shop.system.mapper.OrderMapper">

    <resultMap type="com.shop.system.domain.Order" id="OrderResult">
        <id     property="orderId"         column="order_id"      />
        <result property="orderNo"         column="order_no"      />
        <result property="userId"          column="user_id"       />
        <result property="totalAmount"     column="total_amount"  />
        <result property="orderStatus"     column="order_status"  />
        <result property="paymentTime"     column="payment_time"  />
        <result property="deliveryTime"   column="delivery_time" />
        <result property="receiveTime"      column="receive_time"   />
        <result property="createTime"      column="create_time"   />
        <result property="updateTime"      column="update_time"   />
        <result property="remark"          column="remark"        />
        <result property="address" column="address"/>
        <!-- 添加 minAmount 和 maxAmount 的映射 -->
        <result property="minAmount" column="min_amount" />
        <result property="maxAmount" column="max_amount" />
        <!-- 添加 userName 的映射 -->
        <result property="userName"       column="user_name"     />
    </resultMap>

    <sql id="selectOrderVo">
        select order_id, order_no, o.user_id, total_amount, order_status, payment_time, delivery_time, receive_time, o.create_time, o.update_time, o.remark, address from `order` o
    </sql>
    
    <sql id="selectOrderWithUserVo">
        select o.order_id, o.order_no, o.user_id, o.total_amount, o.order_status, o.payment_time, o.delivery_time, o.receive_time, o.create_time, o.update_time, o.remark, o.address, u.user_name
        from `order` o
        left join sys_user u on o.user_id = u.user_id
    </sql>
    <!-- 用于订单管理，支持按用户名称搜索 -->
    <select id="selectOrderList" parameterType="com.shop.system.domain.Order" resultMap="OrderResult">
        <include refid="selectOrderWithUserVo"/>
        <where>
            <if test="userId != null">
                and o.user_id = #{userId}
            </if>
            <if test="orderId != null">
                and o.order_id = #{orderId}
            </if>
            <if test="orderNo != null and orderNo != ''">
                and o.order_no like concat('%', #{orderNo}, '%')
            </if>
            <if test="userName != null and userName != ''">
                and u.user_name like concat('%', #{userName}, '%')
            </if>
            <if test="totalAmount != null">
                and o.total_amount = #{totalAmount}
            </if>
            <if test="orderStatus != null and orderStatus != ''">
                and o.order_status = #{orderStatus}
            </if>
            <if test="paymentTime != null">
                and o.payment_time = #{paymentTime}
            </if>
            <if test="deliveryTime != null">
                and o.delivery_time = #{deliveryTime}
            </if>
            <if test="receiveTime != null">
                and o.receive_time = #{receiveTime}
            </if>
            <if test="createTime != null">
                and o.create_time = #{createTime}
            </if>
            <if test="updateTime != null">
                and o.update_time = #{updateTime}
            </if>

            <!-- 新增：金额范围 -->
            <if test="minAmount != null">
                AND o.total_amount >= #{minAmount}
            </if>
            <if test="maxAmount != null">
                AND o.total_amount &lt;= #{maxAmount}
                <!-- &lt;= 是小于等于的意思, (大于号): 在 XML 中，> 字符 只有 在作为标签的结束符时才具有特殊意义（例如 </select>）。
                 在其他情况下，例如在 SQL 语句中作为大于号运算符，> 通常 不需要转义。 大多数 XML 解析器足够智能，可以区分这两种情况
                  在 XML 中，< 字符 始终 被解释为标签的开始。 因此，如果你想在文本内容（例如 SQL 语句）中使用 < 作为小于号运算符,
                   必须 使用转义字符 &lt;，否则 XML 解析器会认为你正在尝试开始一个新的标签，从而导致解析错误-->
            </if>
        </where>
    </select>

    <!-- 新增 SQL，专门用于查询当前用户的订单 -->
    <select id="selectMyOrderList" parameterType="java.lang.Long" resultMap="OrderResult">
        <include refid="selectOrderVo"/>
        WHERE user_id = #{userId}  <!-- 强制根据 userId 过滤 -->
    </select>

    <!-- 其他 SQL 保持不变 -->
    <select id="selectOrderById" parameterType="java.lang.Long" resultMap="OrderResult">
        <include refid="selectOrderVo"/>
        where order_id = #{orderId}
    </select>

    <select id="selectOrderByOrderNo" parameterType="java.lang.String" resultMap="OrderResult">
        <include refid="selectOrderVo"/>
        where order_no = #{orderNo}
    </select>

    <select id="selectOrderByUserId" parameterType="java.lang.Long" resultMap="OrderResult">
        <include refid="selectOrderVo"/>
        where user_id = #{userId}
        order by create_time desc
    </select>

    <insert id="insertOrder" parameterType="com.shop.system.domain.Order" useGeneratedKeys="true" keyProperty="orderId">
        insert into `order`
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="orderNo != null">order_no,</if>
            <if test="userId != null">user_id,</if>
            <if test="totalAmount != null">total_amount,</if>
            <if test="orderStatus != null">order_status,</if>
            <if test="paymentTime != null">payment_time,</if>
            <if test="deliveryTime != null">delivery_time,</if>
            <if test="receiveTime != null">receive_time,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateTime != null">update_time,</if>
            <if test="remark != null">remark,</if>
            <if test="address != null">address,</if>
            <!-- 添加 minAmount 和 maxAmount -->
            <if test="minAmount != null">min_amount,</if>
            <if test="maxAmount != null">max_amount,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="orderNo != null">#{orderNo},</if>
            <if test="userId != null">#{userId},</if>
            <if test="totalAmount != null">#{totalAmount},</if>
            <if test="orderStatus != null">#{orderStatus},</if>
            <if test="paymentTime != null">#{paymentTime},</if>
            <if test="deliveryTime != null">#{deliveryTime},</if>
            <if test="receiveTime != null">#{receiveTime},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
            <if test="remark != null">#{remark},</if>
            <if test="address != null">#{address},</if>
            <!-- 添加 minAmount 和 maxAmount -->
            <if test="minAmount != null">#{minAmount},</if>
            <if test="maxAmount != null">#{maxAmount},</if>
        </trim>
    </insert>

    <update id="updateOrder" parameterType="com.shop.system.domain.Order">
        update `order`
        <trim prefix="SET" suffixOverrides=",">
            <if test="orderNo != null">order_no = #{orderNo},</if>
            <if test="userId != null">user_id = #{userId},</if>
            <if test="totalAmount != null">total_amount = #{totalAmount},</if>
            <if test="orderStatus != null">order_status = #{orderStatus},</if>
            <if test="paymentTime != null">payment_time = #{paymentTime},</if>
            <if test="deliveryTime != null">delivery_time = #{deliveryTime},</if>
            <if test="receiveTime != null">receive_time = #{receiveTime},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
            <if test="remark != null">remark = #{remark},</if>
            <if test="address != null">address = #{address},</if>
            <!-- 添加 minAmount 和 maxAmount -->
            <if test="minAmount != null">min_amount = #{minAmount},</if>
            <if test="maxAmount != null">max_amount = #{maxAmount},</if>
        </trim>
        where order_id = #{orderId}
    </update>

    <delete id="deleteOrderById" parameterType="java.lang.Long">
        delete from `order` where order_id = #{orderId}
    </delete>

    <delete id="deleteOrderByIds" parameterType="java.lang.Long">
        delete from `order` where order_id in
        <foreach item="orderId" collection="array" open="(" separator="," close=")">
            #{orderId}
        </foreach>
    </delete>
</mapper>